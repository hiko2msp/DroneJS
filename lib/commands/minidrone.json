{
  "project": {
    "id": 2,
    "description": "All MiniDrone-only commands",
    "categories": [
      {
        "id": 0,
        "cmd": [
          {
            "id": 0,
            "description": "Do a flat trim",
            "name": "flatTrim"
          },
          {
            "id": 1,
            "description": "Ask the drone to take off",
            "name": "takeOff"
          },
          {
            "buffer": "NON_ACK",
            "id": 2,
            "description": "Ask the drone to move around.",
            "name": "maneuver",
            "arg": [
              {
                "type": "u8",
                "name": "flag",
                "description": "Boolean flag to activate roll/pitch movement"
              },
              {
                "type": "i8",
                "name": "roll",
                "description": "Roll consign for the MiniDrone [-100;100]"
              },
              {
                "type": "i8",
                "name": "pitch",
                "description": "Pitch consign for the MiniDrone [-100;100]"
              },
              {
                "type": "i8",
                "name": "yaw",
                "description": "Yaw consign for the MiniDrone [-100;100]"
              },
              {
                "type": "i8",
                "name": "gaz",
                "description": "Gaz consign for the MiniDrone [-100;100]"
              },
              {
                "type": "u32",
                "name": "timestamp",
                "description": "Timestamp in miliseconds. Not an absolute time. (Typically 0 = time of connexion)."
              }
            ]
          },
          {
            "id": 3,
            "description": "Ask the MiniDrone to land",
            "name": "landing"
          },
          {
            "buffer": "HIGH_PRIO",
            "name": "emergency",
            "description": "Put drone in emergency state",
            "timeout": "RETRY",
            "id": 4
          },
          {
            "id": 5,
            "description": "Set MiniDrone automatic take off mode",
            "name": "autoTakeOffMode",
            "arg": [
              {
                "type": "u8",
                "name": "state",
                "description": "State of automatic take off mode"
              }
            ]
          },
          {
            "id": 6,
            "description": "Set drone FlyingMode. Only supported by WingX",
            "name": "flyingMode",
            "arg": [
              {
                "type": "u8",
                "values": [
                  {
                    "name": "quadricopter",
                    "value": 0,
                    "description": "Fly as a quadrictopter"
                  },
                  {
                    "name": "plane_forward",
                    "value": 1,
                    "description": "Fly as a plane in forward mode"
                  },
                  {
                    "name": "plane_backward",
                    "value": 2,
                    "description": "Fly as a plane in backward mode"
                  }
                ],
                "name": "mode",
                "description": "Drone Flying Mode"
              }
            ]
          },
          {
            "id": 7,
            "description": "Set Plane Gear Box. Only supported by WingX",
            "name": "planeGearBox",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "gear_1",
                    "value": 0,
                    "description": "Gear 1. Low speed"
                  },
                  {
                    "name": "gear_2",
                    "value": 1,
                    "description": "Gear 2. Middle speed"
                  },
                  {
                    "name": "gear_3",
                    "value": 2,
                    "description": "Gear 3. High speed"
                  }
                ],
                "name": "state",
                "description": "Plane Gear Box"
              }
            ]
          },
          {
            "id": 8,
            "description": "Command to toggle between \"easy\" piloting mode and \"preferred\" piloting mode.This command only works while the drone is flying.",
            "name": "togglePilotingMode"
          }
        ],
        "description": "All commands related to piloting the MiniDrone",
        "name": "piloting"
      },
      {
        "id": 3,
        "cmd": [
          {
            "id": 0,
            "description": "MiniDrone send flat trim was correctly processed",
            "name": "flatTrimChanged"
          },
          {
            "id": 1,
            "description": "Drone flying state changed",
            "name": "flyingStateChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "landed",
                    "value": 0,
                    "description": "Landed state"
                  },
                  {
                    "name": "takingoff",
                    "value": 1,
                    "description": "Taking off state"
                  },
                  {
                    "name": "hovering",
                    "value": 2,
                    "description": "Hovering state"
                  },
                  {
                    "name": "flying",
                    "value": 3,
                    "description": "Flying state"
                  },
                  {
                    "name": "landing",
                    "value": 4,
                    "description": "Landing state"
                  },
                  {
                    "name": "emergency",
                    "value": 5,
                    "description": "Emergency state"
                  },
                  {
                    "name": "rolling",
                    "value": 6,
                    "description": "Rolling state"
                  },
                  {
                    "name": "init",
                    "value": 7,
                    "description": "Initializing state (user should let the drone steady for a while)"
                  }
                ],
                "name": "state",
                "description": "Drone flying state"
              }
            ]
          },
          {
            "id": 2,
            "description": "Drone alert state changed",
            "name": "alertStateChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "none",
                    "value": 0,
                    "description": "No alert"
                  },
                  {
                    "name": "user",
                    "value": 1,
                    "description": "User emergency alert"
                  },
                  {
                    "name": "cut_out",
                    "value": 2,
                    "description": "Cut out alert"
                  },
                  {
                    "name": "critical_battery",
                    "value": 3,
                    "description": "Critical battery alert"
                  },
                  {
                    "name": "low_battery",
                    "value": 4,
                    "description": "Low battery alert"
                  }
                ],
                "name": "state",
                "description": "Drone alert state"
              }
            ]
          },
          {
            "id": 3,
            "description": "Set MiniDrone automatic take off mode",
            "name": "autoTakeOffModeChanged",
            "arg": [
              {
                "type": "u8",
                "name": "state",
                "description": "State of automatic take off mode"
              }
            ]
          },
          {
            "id": 4,
            "description": "FlyingMode changed. Only supported by WingX",
            "name": "flyingModeChanged",
            "arg": [
              {
                "type": "u8",
                "values": [
                  {
                    "name": "quadricopter",
                    "value": 0,
                    "description": "Fly as a quadrictopter"
                  },
                  {
                    "name": "plane_forward",
                    "value": 1,
                    "description": "Fly as a plane in forward mode"
                  },
                  {
                    "name": "plane_backward",
                    "value": 2,
                    "description": "Fly as a plane in backward mode"
                  }
                ],
                "name": "mode",
                "description": "Drone Flying Mode"
              }
            ]
          },
          {
            "id": 5,
            "description": "Plane Gear Box changed. Only supported by WingX",
            "name": "planeGearBoxChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "gear_1",
                    "value": 0,
                    "description": "Gear 1. Low speed"
                  },
                  {
                    "name": "gear_2",
                    "value": 1,
                    "description": "Gear 2. Middle speed"
                  },
                  {
                    "name": "gear_3",
                    "value": 2,
                    "description": "Gear 3. High speed"
                  }
                ],
                "name": "state",
                "description": "Plane Gear Box"
              }
            ]
          },
          {
            "id": 6,
            "description": "Event informing about the piloting mode.",
            "name": "pilotingModeChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "easy",
                    "value": 0,
                    "description": "The flight envelope of Mambo FPV has been divided in three piloting modes.The first one corresponds to the well-known flying mode currently used forMambo, which is based in an horizontal stabilisation (performed via thevertical camera and the acceleration information) and a vertical acceleration(by means of the ultrasound, the barometer and the vertical accelerometer) inorder for the drone to stay in fixed point position when no piloting commandsare sent by the user."
                  },
                  {
                    "name": "medium",
                    "value": 1,
                    "description": ""
                  },
                  {
                    "name": "difficult",
                    "value": 2,
                    "description": "The third piloting mode also adds the vertical stabilisation deactivation and,therefore, a slight vertical drift. When flying in the third mode, a closedloop height control is no longer performed in order for the drone to keep acertain height and vertical speed. Instead, the vertical command coming fromthe user will directly generate an open loop acceleration command."
                  }
                ],
                "name": "mode",
                "description": ""
              }
            ]
          }
        ],
        "description": "Occasional information",
        "name": "pilotingState"
      },
      {
        "id": 4,
        "cmd": [
          {
            "id": 0,
            "description": "Make a flip",
            "name": "flip",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "front",
                    "value": 0,
                    "description": "Flip direction front"
                  },
                  {
                    "name": "back",
                    "value": 1,
                    "description": "Flip direction back"
                  },
                  {
                    "name": "right",
                    "value": 2,
                    "description": "Flip direction right"
                  },
                  {
                    "name": "left",
                    "value": 3,
                    "description": "Flip direction left"
                  }
                ],
                "name": "direction",
                "description": "Direction for the flip"
              }
            ]
          },
          {
            "id": 1,
            "description": "Change the product cap",
            "name": "cap",
            "arg": [
              {
                "type": "i16",
                "name": "offset",
                "description": "Change the cap with offset angle [-180;180]"
              }
            ]
          }
        ],
        "description": "Animation commands",
        "name": "animations"
      },
      {
        "id": 6,
        "cmd": [
          {
            "id": 0,
            "description": "@deprecatedTake picture",
            "name": "picture",
            "arg": [
              {
                "type": "u8",
                "name": "mass_storage_id",
                "description": "Mass storage id to take picture"
              }
            ]
          },
          {
            "id": 1,
            "description": "Take picture",
            "name": "pictureV2"
          }
        ],
        "description": "Media recording management",
        "name": "mediaRecord"
      },
      {
        "id": 7,
        "cmd": [
          {
            "id": 0,
            "description": "@deprecatedState of picture recording",
            "name": "pictureStateChanged",
            "arg": [
              {
                "type": "u8",
                "name": "state",
                "description": "1 if picture has been taken, 0 otherwise"
              },
              {
                "type": "u8",
                "name": "mass_storage_id",
                "description": "Mass storage id to record"
              }
            ]
          },
          {
            "id": 1,
            "description": "State of device picture recording changed",
            "name": "pictureStateChangedV2",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "ready",
                    "value": 0,
                    "description": "The picture recording is ready"
                  },
                  {
                    "name": "busy",
                    "value": 1,
                    "description": "The picture recording is busy"
                  },
                  {
                    "name": "notAvailable",
                    "value": 2,
                    "description": "The picture recording is not available"
                  }
                ],
                "name": "state",
                "description": "State of device picture recording"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "ok",
                    "value": 0,
                    "description": "No Error"
                  },
                  {
                    "name": "unknown",
                    "value": 1,
                    "description": "Unknown generic error"
                  },
                  {
                    "name": "camera_ko",
                    "value": 2,
                    "description": "Picture camera is out of order"
                  },
                  {
                    "name": "memoryFull",
                    "value": 3,
                    "description": "Memory full ; cannot save one additional picture"
                  },
                  {
                    "name": "lowBattery",
                    "value": 4,
                    "description": "Battery is too low to start/keep recording."
                  }
                ],
                "name": "error",
                "description": "Error to explain the state"
              }
            ]
          }
        ],
        "description": "State of media recording",
        "name": "mediaRecordState"
      },
      {
        "id": 2,
        "cmd": [
          {
            "content": "NOTIFICATION",
            "id": 0,
            "description": "Event of picture recording",
            "name": "pictureEventChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "taken",
                    "value": 0,
                    "description": "Picture taken and saved"
                  },
                  {
                    "name": "failed",
                    "value": 1,
                    "description": "Picture failed"
                  }
                ],
                "name": "event",
                "description": "Last event of picture recording"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "ok",
                    "value": 0,
                    "description": "No Error"
                  },
                  {
                    "name": "unknown",
                    "value": 1,
                    "description": "Unknown generic error ; only when state is failed"
                  },
                  {
                    "name": "busy",
                    "value": 2,
                    "description": "Picture recording is busy ; only when state is failed"
                  },
                  {
                    "name": "notAvailable",
                    "value": 3,
                    "description": "Picture recording not available ; only when state is failed"
                  },
                  {
                    "name": "memoryFull",
                    "value": 4,
                    "description": "Memory full ; only when state is failed"
                  },
                  {
                    "name": "lowBattery",
                    "value": 5,
                    "description": "Battery is too low to record."
                  }
                ],
                "name": "error",
                "description": "Error to explain the event"
              }
            ]
          }
        ],
        "description": "Events of media recording",
        "name": "mediaRecordEvent"
      },
      {
        "id": 8,
        "cmd": [
          {
            "id": 0,
            "description": "Set Max Altitude",
            "name": "maxAltitude",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current altitude max in m"
              }
            ]
          },
          {
            "id": 1,
            "description": "Set Max Tilt",
            "name": "maxTilt",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current tilt max in degree"
              }
            ]
          },
          {
            "id": 2,
            "description": "",
            "name": "bankedTurn",
            "arg": [
              {
                "result": "The banked turn mode is enabled or disabled.\\n     Then, event [BankedTurnMode](#2-9-2) is triggered.",
                "support": "090b:3.0.6",
                "desc": "Set banked turn mode.\\n     When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.",
                "description": "",
                "title": "Set banked turn mode"
              },
              {
                "type": "u8",
                "name": "value",
                "description": "1 to enable, 0 to disable"
              }
            ]
          },
          {
            "id": 3,
            "description": "",
            "name": "maxThrottle",
            "arg": [
              {
                "type": "float",
                "name": "max",
                "description": "Max throttle, between 0 and 1."
              }
            ]
          },
          {
            "id": 4,
            "description": "The flight envelope of Mambo FPV has been divided in three piloting modes.",
            "name": "preferredPilotingMode",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "easy",
                    "value": 0,
                    "description": "The flight envelope of Mambo FPV has been divided in three piloting modes.The first one corresponds to the well-known flying mode currently used forMambo, which is based in an horizontal stabilisation (performed via thevertical camera and the acceleration information) and a vertical acceleration(by means of the ultrasound, the barometer and the vertical accelerometer) inorder for the drone to stay in fixed point position when no piloting commandsare sent by the user."
                  },
                  {
                    "name": "medium",
                    "value": 1,
                    "description": ""
                  },
                  {
                    "name": "difficult",
                    "value": 2,
                    "description": "The third piloting mode also adds the vertical stabilisation deactivation and,therefore, a slight vertical drift. When flying in the third mode, a closedloop height control is no longer performed in order for the drone to keep acertain height and vertical speed. Instead, the vertical command coming fromthe user will directly generate an open loop acceleration command."
                  }
                ],
                "name": "mode",
                "description": "Piloting modes."
              }
            ]
          }
        ],
        "description": "Piloting Settings commands",
        "name": "pilotingSettings"
      },
      {
        "id": 9,
        "cmd": [
          {
            "id": 0,
            "description": "Max Altitude sent by product",
            "name": "maxAltitudeChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current altitude max"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of altitude"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of altitude"
              }
            ]
          },
          {
            "id": 1,
            "description": "Max tilt sent by product",
            "name": "maxTiltChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max tilt"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of tilt"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of tilt"
              }
            ]
          },
          {
            "id": 2,
            "description": "",
            "name": "bankedTurnChanged",
            "arg": [
              {
                "support": "090b:3.0.6",
                "desc": "Banked Turn mode.\\n     If banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.",
                "description": "",
                "triggered": "by [SetBankedTurnMode](#2-8-2).",
                "title": "Banked Turn mode"
              },
              {
                "type": "u8",
                "name": "state",
                "description": "1 if enabled, 0 if disabled"
              }
            ]
          },
          {
            "id": 3,
            "description": "Event informing about the max throttle.",
            "name": "maxThrottleChanged",
            "arg": [
              {
                "type": "float",
                "name": "max",
                "description": "Max throttle, between 0 and 1."
              }
            ]
          },
          {
            "id": 4,
            "description": "Event informing about the preferred piloting mode.",
            "name": "preferredPilotingModeChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "easy",
                    "value": 0,
                    "description": "The flight envelope of Mambo FPV has been divided in three piloting modes.The first one corresponds to the well-known flying mode currently used forMambo, which is based in an horizontal stabilisation (performed via thevertical camera and the acceleration information) and a vertical acceleration(by means of the ultrasound, the barometer and the vertical accelerometer) inorder for the drone to stay in fixed point position when no piloting commandsare sent by the user."
                  },
                  {
                    "name": "medium",
                    "value": 1,
                    "description": ""
                  },
                  {
                    "name": "difficult",
                    "value": 2,
                    "description": "The third piloting mode also adds the vertical stabilisation deactivation and,therefore, a slight vertical drift. When flying in the third mode, a closedloop height control is no longer performed in order for the drone to keep acertain height and vertical speed. Instead, the vertical command coming fromthe user will directly generate an open loop acceleration command."
                  }
                ],
                "name": "mode",
                "description": ""
              }
            ]
          }
        ],
        "description": "Piloting Settings state from product",
        "name": "pilotingSettingsState"
      },
      {
        "id": 1,
        "cmd": [
          {
            "id": 0,
            "description": "Set Max Vertical speed",
            "name": "maxVerticalSpeed",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max vertical speed in m/s"
              }
            ]
          },
          {
            "id": 1,
            "description": "Set Max Rotation speed",
            "name": "maxRotationSpeed",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max rotation speed in degree/s"
              }
            ]
          },
          {
            "id": 2,
            "description": "Presence of wheels",
            "name": "wheels",
            "arg": [
              {
                "type": "u8",
                "name": "present",
                "description": "1 if present, 0 if not present"
              }
            ]
          },
          {
            "id": 3,
            "description": "Set Max Horizontal speed (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)",
            "name": "maxHorizontalSpeed",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max Horizontal speed in m/s"
              }
            ]
          },
          {
            "id": 4,
            "description": "Set max plane mode rotation speed (only available for wing x)",
            "name": "maxPlaneModeRotationSpeed",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max plane mode rotation speed in degree/s"
              }
            ]
          }
        ],
        "description": "Speed Settings commands",
        "name": "speedSettings"
      },
      {
        "id": 5,
        "cmd": [
          {
            "id": 0,
            "description": "Max vertical speed sent by product",
            "name": "maxVerticalSpeedChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max vertical speed in m/s"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of vertical speed"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of vertical speed"
              }
            ]
          },
          {
            "id": 1,
            "description": "Max rotation speed sent by product",
            "name": "maxRotationSpeedChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max rotation speed in degree/s"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of rotation speed"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of rotation speed"
              }
            ]
          },
          {
            "id": 2,
            "description": "Presence of wheels sent by product",
            "name": "wheelsChanged",
            "arg": [
              {
                "type": "u8",
                "name": "present",
                "description": "1 if present, 0 if not present"
              }
            ]
          },
          {
            "id": 3,
            "description": "Max horizontal speed sent by product (only used in case where PilotingSettings_MaxTilt is not used like in hydrofoil mode)",
            "name": "maxHorizontalSpeedChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max horizontal speed in m/s"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of horizontal speed"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of horizontal speed"
              }
            ]
          },
          {
            "id": 4,
            "description": "Max plane rotation speed sent by product (only available for wing x)",
            "name": "maxPlaneModeRotationSpeedChanged",
            "arg": [
              {
                "type": "float",
                "name": "current",
                "description": "Current max plane mode rotation speed in degree/s"
              },
              {
                "type": "float",
                "name": "min",
                "description": "Range min of plane mode rotation speed"
              },
              {
                "type": "float",
                "name": "max",
                "description": "Range max of plane mode rotation speed"
              }
            ]
          }
        ],
        "description": "Speed Settings state from product",
        "name": "speedSettingsState"
      },
      {
        "id": 10,
        "cmd": [
          {
            "id": 0,
            "description": "Set MiniDrone cut out mode",
            "name": "cutOutMode",
            "arg": [
              {
                "type": "u8",
                "name": "enable",
                "description": "Enable cut out mode (1 if is activate, 0 otherwise)"
              }
            ]
          }
        ],
        "description": "Settings commands",
        "name": "settings"
      },
      {
        "id": 11,
        "cmd": [
          {
            "id": 0,
            "description": "@deprecatedProduct Motors versions",
            "name": "productMotorsVersionChanged",
            "arg": [
              {
                "type": "u8",
                "name": "motor",
                "description": "Product Motor number [1 - 4]"
              },
              {
                "type": "string",
                "name": "type",
                "description": "Product Motor type"
              },
              {
                "type": "string",
                "name": "software",
                "description": "Product Motors software version"
              },
              {
                "type": "string",
                "name": "hardware",
                "description": "Product Motors hardware version"
              }
            ]
          },
          {
            "id": 1,
            "description": "@deprecatedProduct Inertial versions",
            "name": "productInertialVersionChanged",
            "arg": [
              {
                "type": "string",
                "name": "software",
                "description": "Product Inertial software version"
              },
              {
                "type": "string",
                "name": "hardware",
                "description": "Product Inertial hardware version"
              }
            ]
          },
          {
            "id": 2,
            "description": "MiniDrone cut out mode",
            "name": "cutOutModeChanged",
            "arg": [
              {
                "type": "u8",
                "name": "enable",
                "description": "State of cut out mode (1 if is activate, 0 otherwise)"
              }
            ]
          }
        ],
        "description": "Settings state from product",
        "name": "settingsState"
      },
      {
        "id": 12,
        "cmd": [
          {
            "id": 0,
            "description": "@deprecatedFlood control regulation",
            "name": "floodControlChanged",
            "arg": [
              {
                "type": "u16",
                "name": "delay",
                "description": "Delay (in ms) between two PCMD"
              }
            ]
          }
        ],
        "description": "Settings state from product",
        "name": "floodControlState"
      },
      {
        "id": 13,
        "cmd": [
          {
            "id": 0,
            "description": "Set the controller latitude for a run.",
            "name": "controllerLatitudeForRun",
            "arg": [
              {
                "type": "double",
                "name": "latitude",
                "description": "Controller latitude in decimal degrees"
              }
            ]
          },
          {
            "id": 1,
            "description": "Set the controller longitude for a run.",
            "name": "controllerLongitudeForRun",
            "arg": [
              {
                "type": "double",
                "name": "longitude",
                "description": "Controller longitude in decimal degrees"
              }
            ]
          }
        ],
        "description": "GPS related commands",
        "name": "gPS"
      },
      {
        "id": 14,
        "cmd": [
          {
            "id": 0,
            "description": "Set the controller type.",
            "name": "controllerType",
            "arg": [
              {
                "type": "string",
                "name": "type",
                "description": "Controller type like iOS or Android"
              }
            ]
          },
          {
            "id": 1,
            "description": "Set the controller name.",
            "name": "controllerName",
            "arg": [
              {
                "type": "string",
                "name": "name",
                "description": "Controller name like com.parrot.freeflight3"
              }
            ]
          }
        ],
        "description": "Configuration related commands",
        "name": "configuration"
      },
      {
        "id": 15,
        "cmd": [
          {
            "id": 0,
            "type": "MAP_ITEM",
            "description": "USB Light accessory state cmd.",
            "name": "lightState",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "fIXED",
                    "value": 0,
                    "description": "Fixed state at given intensity."
                  },
                  {
                    "name": "bLINKED",
                    "value": 1,
                    "description": "Blinked state."
                  },
                  {
                    "name": "oSCILLATED",
                    "value": 2,
                    "description": "Oscillated state."
                  }
                ],
                "name": "state",
                "description": "Usb Light state."
              },
              {
                "type": "u8",
                "name": "intensity",
                "description": "Light intensity from 0 (OFF) to 100 (Max intensity).Only used in FIXED state."
              },
              {
                "type": "u8",
                "name": "list_flags",
                "description": "List entry attribute Bitfield.0x01: First: indicate it's the first element of the list.0x02: Last: indicate it's the last element of the list.0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.0x08: Remove: This value should be removed from the existing list."
              }
            ]
          },
          {
            "id": 1,
            "type": "MAP_ITEM",
            "description": "USB Claw accessory state cmd.",
            "name": "clawState",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "opened",
                    "value": 0,
                    "description": "Claw is fully opened."
                  },
                  {
                    "name": "opening",
                    "value": 1,
                    "description": "Claw open in progress."
                  },
                  {
                    "name": "closed",
                    "value": 2,
                    "description": "Claw is fully closed."
                  },
                  {
                    "name": "closing",
                    "value": 3,
                    "description": "Claw close in progress."
                  }
                ],
                "name": "state",
                "description": "Usb Claw state."
              },
              {
                "type": "u8",
                "name": "list_flags",
                "description": "List entry attribute Bitfield.0x01: First: indicate it's the first element of the list.0x02: Last: indicate it's the last element of the list.0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.0x08: Remove: This value should be removed from the existing list."
              }
            ]
          },
          {
            "id": 2,
            "type": "MAP_ITEM",
            "description": "USB Gun accessory state cmd.",
            "name": "gunState",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id."
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "rEADY",
                    "value": 0,
                    "description": "Gun is ready to fire."
                  },
                  {
                    "name": "bUSY",
                    "value": 1,
                    "description": "Gun is busy (ie not ready to fire)."
                  }
                ],
                "name": "state",
                "description": "USB Claw state."
              },
              {
                "type": "u8",
                "name": "list_flags",
                "description": "List entry attribute Bitfield.0x01: First: indicate it's the first element of the list.0x02: Last: indicate it's the last element of the list.0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.0x08: Remove: This value should be removed from the existing list."
              }
            ]
          }
        ],
        "description": "USB Accessories state commands.",
        "name": "usbAccessoryState"
      },
      {
        "id": 16,
        "cmd": [
          {
            "id": 0,
            "description": "USB Light control cmd.",
            "name": "lightControl",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "fIXED",
                    "value": 0,
                    "description": "Turn light in fixed state at a given intensity."
                  },
                  {
                    "name": "bLINKED",
                    "value": 1,
                    "description": "Turn light in blinked state."
                  },
                  {
                    "name": "oSCILLATED",
                    "value": 2,
                    "description": "Turn light in oscillated state."
                  }
                ],
                "name": "mode",
                "description": "Usb Light mode."
              },
              {
                "type": "u8",
                "name": "intensity",
                "description": "Light intensity from 0 (OFF) to 100 (Max intensity).Only used in FIXED mode."
              }
            ]
          },
          {
            "id": 1,
            "description": "USB Claw control cmd.",
            "name": "clawControl",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id."
              },
              {
                "type": "enum",
                "values": [
                  {
                    "id": 0,
                    "name": "oPEN",
                    "value": 0,
                    "description": "Open Claw."
                  },
                  {
                    "id": 1,
                    "name": "cLOSE",
                    "value": 1,
                    "description": "Close Claw."
                  }
                ],
                "name": "action",
                "description": "USB Claw action."
              }
            ]
          },
          {
            "id": 2,
            "description": "USB Gun control cmd.",
            "name": "gunControl",
            "arg": [
              {
                "type": "u8",
                "name": "id",
                "description": "Usb accessory id"
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "fIRE",
                    "value": 0,
                    "description": "Fire."
                  }
                ],
                "name": "action",
                "description": "USB Gun action."
              }
            ]
          }
        ],
        "description": "USB Accessories control commands.",
        "name": "usbAccessory"
      },
      {
        "id": 17,
        "cmd": [
          {
            "id": 0,
            "description": "Send the address of the remote controller on which the drone should be pairedThis is used to pair a Tinos controllerWhere mac address: MSB-MID-LSB.",
            "name": "setPairedRemote",
            "arg": [
              {
                "type": "u16",
                "name": "msb_mac",
                "description": "2 most significant bytes of mac address"
              },
              {
                "type": "u16",
                "name": "mid_mac",
                "description": "2 middle bytes of mac address"
              },
              {
                "type": "u16",
                "name": "lsb_mac",
                "description": "2 least significant bytes of mac address"
              }
            ]
          }
        ],
        "description": "Remote controller related commands.",
        "name": "remoteController"
      },
      {
        "id": 18,
        "cmd": [
          {
            "id": 0,
            "description": "Get the drone position from takeoff point (0, 0, 0, 0).The orthonormal basis is fixed at this point. The axis areoriented the following way :* X : From the rear of the drone to its front.* Y : From the right of the drone to its left.* Z : Orthogonal to X and Y and oriented upward.* Psi : From 180 to -180 in the clockwise direction,",
            "name": "dronePosition",
            "arg": [
              {
                "type": "float",
                "name": "posx",
                "description": "Position on X axis, relative to take off position (cm)."
              },
              {
                "type": "float",
                "name": "posy",
                "description": "Position on Y axis, relative to take off position (cm)."
              },
              {
                "type": "i16",
                "name": "posz",
                "description": "Position on Z axis, relative to take off position (cm)."
              },
              {
                "type": "i16",
                "name": "psi",
                "description": "Psi angle [-180; 180], relative to take off orientation."
              },
              {
                "type": "i16",
                "name": "ts",
                "description": "Time elapsed since last data send (ms)."
              }
            ]
          },
          {
            "buffer": "NON_ACK",
            "id": 1,
            "description": "Event informing about the estimated drone speed in horizontal frame.It is similar to NED frame but with drone heading.Down speed is positive when the drone is going down.Speed is in m/s.",
            "name": "droneSpeed",
            "arg": [
              {
                "type": "float",
                "name": "speed_x",
                "description": "Speed on the x axis (when drone moves forward, speed is > 0)."
              },
              {
                "type": "float",
                "name": "speed_y",
                "description": "Speed on the y axis (when drone moves right, speed is > 0)."
              },
              {
                "type": "float",
                "name": "speed_z",
                "description": "Speed on the z axis (when drone moves down, speed is > 0)."
              },
              {
                "type": "u16",
                "name": "ts",
                "description": "Acquisition timestamp (ms)."
              }
            ]
          },
          {
            "buffer": "NON_ACK",
            "id": 2,
            "description": "Event informing about the estimated altitude above takeoff level.",
            "name": "droneAltitude",
            "arg": [
              {
                "type": "float",
                "name": "altitude",
                "description": "Altitude in meters."
              },
              {
                "type": "u16",
                "name": "ts",
                "description": "Acquisition timestamp (ms)."
              }
            ]
          },
          {
            "buffer": "NON_ACK",
            "id": 4,
            "description": "Event informing about the estimated quaternion.They represent the rotation from the NED frame (determined at drone startup) to the estimated drone body frame.Its elements are between -1 and 1.",
            "name": "droneQuaternion",
            "arg": [
              {
                "type": "float",
                "name": "q_w",
                "description": "Element w."
              },
              {
                "type": "float",
                "name": "q_x",
                "description": "Element x."
              },
              {
                "type": "float",
                "name": "q_y",
                "description": "Element y."
              },
              {
                "type": "float",
                "name": "q_z",
                "description": "Element z."
              },
              {
                "type": "u16",
                "name": "ts",
                "description": "Acquisition timestamp (ms)."
              }
            ]
          }
        ],
        "description": "Navigation Data.",
        "name": "navigationDataState"
      },
      {
        "id": 19,
        "cmd": [
          {
            "id": 0,
            "description": "Event informing about the minicam power mode.",
            "name": "powerModeChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "low",
                    "value": 0,
                    "description": "Low power: most hardware is powered off, wake up via USB resume.Used when charging."
                  },
                  {
                    "name": "medium",
                    "value": 1,
                    "description": "Medium power: video hardware is powered off.Used when drone is not flying during more than 3 minutes.Note that it can still stream the SD content."
                  },
                  {
                    "name": "normal",
                    "value": 2,
                    "description": "Normal power: all features are available.Used when flying."
                  }
                ],
                "name": "power_mode",
                "description": "Power mode of the camera."
              }
            ]
          },
          {
            "id": 1,
            "description": "Event informing about the minicam product serial number.",
            "name": "productSerialChanged",
            "arg": [
              {
                "type": "string",
                "name": "serial_number",
                "description": "Serial number."
              }
            ]
          },
          {
            "id": 2,
            "description": "Event informing about the state of the camera.",
            "name": "stateChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "unplugged",
                    "value": 0,
                    "description": "Minicam is unplugged."
                  },
                  {
                    "name": "plugged",
                    "value": 1,
                    "description": "Minicam is plugged, but not ready."
                  },
                  {
                    "name": "ready",
                    "value": 2,
                    "description": "Minicam is ready."
                  }
                ],
                "name": "state",
                "description": "State of the camera."
              }
            ]
          },
          {
            "id": 3,
            "description": "Get the accessory Version.",
            "name": "versionChanged",
            "arg": [
              {
                "type": "string",
                "name": "software",
                "description": "Accessory software version."
              },
              {
                "type": "string",
                "name": "hardware",
                "description": "Accessory hardware version."
              }
            ]
          },
          {
            "id": 4,
            "description": "Event informing that the picture has been taken.",
            "name": "pictureChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "ready",
                    "value": 0,
                    "description": "Picture recording is ready."
                  },
                  {
                    "name": "busy",
                    "value": 1,
                    "description": "Picture recording is busy."
                  },
                  {
                    "name": "not_available",
                    "value": 2,
                    "description": "Picture recording is not available."
                  }
                ],
                "name": "state",
                "description": "State of device picture recording."
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "success",
                    "value": 0,
                    "description": "Success."
                  },
                  {
                    "name": "full_device",
                    "value": 1,
                    "description": "Device is full."
                  },
                  {
                    "name": "continuous_shooting",
                    "value": 2,
                    "description": "Continuous shooting is already running."
                  },
                  {
                    "name": "full_queue",
                    "value": 3,
                    "description": "Over snapshot max queue size."
                  },
                  {
                    "name": "error",
                    "value": 4,
                    "description": "Couldn't take picture."
                  },
                  {
                    "name": "no_sd",
                    "value": 5,
                    "description": "SD card doesn't exist."
                  },
                  {
                    "name": "sd_bad_format",
                    "value": 6,
                    "description": "SD card format error."
                  },
                  {
                    "name": "sd_formatting",
                    "value": 7,
                    "description": "SD card is formatting."
                  }
                ],
                "name": "result",
                "description": "Result of device picture recording."
              }
            ]
          },
          {
            "id": 5,
            "description": "Event informing about the video recording state.",
            "name": "videoStateChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "stopped",
                    "value": 0,
                    "description": "Video is stopped."
                  },
                  {
                    "name": "started",
                    "value": 1,
                    "description": "Video is started."
                  },
                  {
                    "name": "notAvailable",
                    "value": 2,
                    "description": "The video recording is not available."
                  }
                ],
                "name": "state",
                "description": "State of device video recording."
              },
              {
                "type": "enum",
                "values": [
                  {
                    "name": "ok",
                    "value": 0,
                    "description": "No Error."
                  },
                  {
                    "name": "unknown",
                    "value": 1,
                    "description": "Unknown generic error."
                  },
                  {
                    "name": "camera_ko",
                    "value": 2,
                    "description": "Video camera is out of order."
                  },
                  {
                    "name": "memoryFull",
                    "value": 3,
                    "description": "Memory full ; cannot save one additional video."
                  },
                  {
                    "name": "lowBattery",
                    "value": 4,
                    "description": "Battery is too low to start/keep recording."
                  },
                  {
                    "name": "no_sd",
                    "value": 5,
                    "description": "SD card doesn't exist."
                  }
                ],
                "name": "error",
                "description": "Error to explain the state."
              }
            ]
          },
          {
            "content": "NOTIFICATION",
            "id": 6,
            "description": "Event informing that the mass storage has been formatted.",
            "name": "massStorageFormatChanged",
            "arg": [
              {
                "type": "u8",
                "name": "state",
                "description": "1 if Mass Storage has been formatted, 0 otherwise."
              }
            ]
          }
        ],
        "description": "Minicam related events.",
        "name": "minicamState"
      },
      {
        "id": 20,
        "cmd": [
          {
            "id": 0,
            "description": "Set video automatic recording state.",
            "name": "autorecord",
            "arg": [
              {
                "type": "u8",
                "name": "enable",
                "description": "0: disabled1: enabled"
              }
            ]
          },
          {
            "id": 1,
            "description": "Set the electric frequency (Anti-flickering).",
            "name": "electricFrequency",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "fifty_hertz",
                    "value": 0,
                    "description": "Electric frequency of the country is 50hz."
                  },
                  {
                    "name": "sixty_hertz",
                    "value": 1,
                    "description": "Electric frequency of the country is 60hz."
                  }
                ],
                "name": "frequency",
                "description": "Type of the electric frequency."
              }
            ]
          },
          {
            "id": 2,
            "description": "Set video streaming and recording resolution.",
            "name": "videoResolution",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "vga",
                    "value": 0,
                    "description": "16/9 VGA streaming (640 x 360)."
                  },
                  {
                    "name": "hd",
                    "value": 1,
                    "description": "HD streaming (1280 x 720)."
                  }
                ],
                "name": "type",
                "description": "Video resolution type."
              }
            ]
          }
        ],
        "description": "Video settings.",
        "name": "videoSettings"
      },
      {
        "id": 21,
        "cmd": [
          {
            "id": 0,
            "description": "Event informing about the video automatic recording status.",
            "name": "autorecordChanged",
            "arg": [
              {
                "type": "u8",
                "name": "enabled",
                "description": "0: disabled1: enabled"
              }
            ]
          },
          {
            "id": 1,
            "description": "Event informing about the electric frequency (Anti-flickering).",
            "name": "electricFrequencyChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "fifty_hertz",
                    "value": 0,
                    "description": "Electric frequency of the country is 50hz."
                  },
                  {
                    "name": "sixty_hertz",
                    "value": 1,
                    "description": "Electric frequency of the country is 60hz."
                  }
                ],
                "name": "frequency",
                "description": "Type of the electric frequency."
              }
            ]
          },
          {
            "id": 2,
            "description": "Event informing about the streaming resolution.",
            "name": "videoResolutionChanged",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "vga",
                    "value": 0,
                    "description": "16/9 VGA streaming (640 x 360)."
                  },
                  {
                    "name": "hd",
                    "value": 1,
                    "description": "HD streaming (1280 x 720)."
                  }
                ],
                "name": "type",
                "description": "Video resolution type."
              }
            ]
          }
        ],
        "description": "Video settings state.",
        "name": "videoSettingsState"
      },
      {
        "id": 24,
        "cmd": [
          {
            "id": 0,
            "description": "Take picture.",
            "name": "picture"
          },
          {
            "id": 1,
            "description": "Start/Stop video recording.",
            "name": "video",
            "arg": [
              {
                "type": "enum",
                "values": [
                  {
                    "name": "stop",
                    "value": 0,
                    "description": "Stop the video recording."
                  },
                  {
                    "name": "start",
                    "value": 1,
                    "description": "Start the video recording."
                  }
                ],
                "name": "record",
                "description": "Command to record video"
              }
            ]
          },
          {
            "id": 2,
            "description": "Format mass storage.",
            "name": "massStorageFormat"
          }
        ],
        "description": "Minicam related commands.",
        "name": "minicam"
      },
      {
        "id": 25,
        "cmd": [
          {
            "id": 0,
            "description": "State of the connection to the remote controller changed.",
            "name": "connectionChanged",
            "arg": [
              {
                "type": "u8",
                "name": "state",
                "description": "New connection state.0=disconnected1=connected"
              }
            ]
          }
        ],
        "description": "State changes related to the remote controller.",
        "name": "remoteControllerState"
      }
    ],
    "name": "minidrone"
  }
}
